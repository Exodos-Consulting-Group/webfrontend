name: Build and Push to Docker Hub

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: andrewpark93/exodos-frontend

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run quality checks
        run: |
          # Build test image with dev dependencies
          docker build --target test -t test-image .
          
          # Run linting
          echo "üîç Running ESLint..."
          docker run --rm test-image npm run lint
          
          # Run type checking
          echo "üîç Running TypeScript checks..."
          docker run --rm test-image npm run type-check
          
      - name: Test container startup
        if: github.event_name != 'pull_request'
        run: |
          # Test that the built image starts correctly
          docker run -d -p 3000:3000 --name test-container ${{ env.IMAGE_NAME }}:latest
          sleep 10
          
          # Basic health check
          curl -f http://localhost:3000 || exit 1
          echo "‚úÖ Container starts and responds correctly"
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          
      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
          
      - name: Upload security scan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: trivy-results.sarif
          retention-days: 30
