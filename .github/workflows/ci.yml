name: Docker-First CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  docker-build-and-test:
    name: Docker Build & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Build Docker image for testing (with dev dependencies)
      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          load: true
          tags: webfrontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Build production Docker image
      - name: Build production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: webfrontend:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Test the production Docker container functionality
      - name: Test production Docker container startup
        run: |
          docker run -d -p 3000:3000 --name test-container webfrontend:prod
          sleep 15
          
      - name: Health check container
        run: |
          curl -f http://localhost:3000 || exit 1
          echo "âœ… Container is responding correctly"
          
      - name: Check container logs
        run: docker logs test-container
        
      - name: Run lint and type checks in test container
        run: |
          docker run --rm webfrontend:test npm run lint
          docker run --rm webfrontend:test npm run type-check
          
      - name: Cleanup test container
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true

  docker-security-scan:
    name: Docker Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: docker-build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: webfrontend:scan
          cache-from: type=gha
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'webfrontend:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-cross-browser-test:
    name: Cross-Browser Testing via Docker
    runs-on: ubuntu-latest
    needs: docker-build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build application Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: webfrontend:test-app
          cache-from: type=gha
          
      - name: Start application container
        run: |
          docker run -d -p 3001:3000 --name app-container webfrontend:test-app
          sleep 10
          
      - name: Setup Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install test dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3001 --timeout 60000
        
      - name: Run cross-browser tests against Docker container
        run: npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3001
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
          
      - name: Cleanup
        if: always()
        run: |
          docker stop app-container || true
          docker rm app-container || true
