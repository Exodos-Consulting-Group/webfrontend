name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Add global permissions for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: exodosconsulting/exodos-frontend

jobs:
  # Step 1: Run tests and quality checks FIRST
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build application
        run: npm run build

  # Step 2: Build Docker image only if tests pass
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test # Only run if tests pass

    permissions:
      contents: read

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build attestations for security
          provenance: true
          sbom: true

  # Step 3: Security scan the built image
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner (Critical/High - Blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail the job if critical/high vulnerabilities found

      - name: Run Trivy vulnerability scanner (Full Report)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"
          exit-code: "0" # Don't fail on this comprehensive scan

      - name: Display security scan summary
        if: always()
        run: |
          echo "🔍 Security Scan Summary"
          echo "========================"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          if [ -f "trivy-results.sarif" ]; then
            echo "✅ Security scan completed successfully"
            echo "📄 Full results saved as artifact"
          else
            echo "⚠️ Security scan had issues"
          fi

      - name: Try uploading to GitHub Security (if available)
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true # Don't fail if GitHub Advanced Security isn't available

      - name: Upload security scan results as artifact
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          name: security-scan-results
          path: trivy-results.sarif
          retention-days: 30

      - name: Security scan status
        if: always()
        run: |
          echo "🛡️ Security scanning completed"
          echo "- Critical/High vulnerabilities: Blocking (fails pipeline)"
          echo "- Medium/Low vulnerabilities: Informational only"
          echo "- Full scan results available in artifacts"

  # Step 4: Integration test the pushed image
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build, security-scan] # Run after both build and security scan
    if: github.event_name != 'pull_request'

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test container startup and health
        run: |
          # Get the latest tag
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

          echo "🧪 Testing image: $IMAGE_TAG"

          # Start container
          docker run -d -p 3000:3000 --name test-container $IMAGE_TAG

          # Wait for startup
          echo "⏳ Waiting for container to start..."
          sleep 15

          # Check if container is running
          if ! docker ps | grep test-container; then
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi

          # Health check with retry
          echo "🔍 Running health checks..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "✅ Health check passed"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              docker logs test-container
              exit 1
            fi
            echo "⏳ Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done

          # Test specific endpoints
          echo "🔍 Testing application endpoints..."

          # Test home page returns HTML
          if curl -s http://localhost:3000 | grep -q "<html"; then
            echo "✅ Home page returns valid HTML"
          else
            echo "❌ Home page test failed"
            exit 1
          fi

          # Cleanup
          docker stop test-container
          docker rm test-container

          echo "🎉 All integration tests passed!"

  # Step 5: Deploy notification (only runs if everything passes)
  deploy-notification:
    name: Deployment Success
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, integration-test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment success notification
        run: |
          echo "🚀 Deployment successful!"
          echo "✅ Tests passed"
          echo "✅ Docker image built and pushed"
          echo "✅ Security scan completed"
          echo "✅ Integration tests passed"
          echo ""
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
