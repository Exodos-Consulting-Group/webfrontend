name: Docker Build, Test & Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: exodosconsulting/webfrontend

jobs:
  docker-build-production:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=production,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  docker-production-test:
    name: Test Production Docker Image
    runs-on: ubuntu-latest
    needs: docker-build-production
    
    strategy:
      matrix:
        test-scenario:
          - name: "Basic Functionality"
            port: 3000
            path: "/"
          - name: "Health Check"
            port: 3000
            path: "/"
          - name: "Static Assets"
            port: 3000
            path: "/_next/static"
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Test ${{ matrix.test-scenario.name }}
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run container
          docker run -d -p ${{ matrix.test-scenario.port }}:3000 \
            --name test-${{ matrix.test-scenario.name }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for startup
          sleep 15
          
          # Test endpoint
          curl -f http://localhost:${{ matrix.test-scenario.port }}${{ matrix.test-scenario.path }} || exit 1
          
          # Check container health
          docker logs test-${{ matrix.test-scenario.name }}
          
          # Cleanup
          docker stop test-${{ matrix.test-scenario.name }}
          docker rm test-${{ matrix.test-scenario.name }}

  docker-performance-audit:
    name: Performance Audit via Docker
    runs-on: ubuntu-latest
    needs: docker-build-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Run production container for testing
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -d -p 3002:3000 --name perf-test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          sleep 15
          
      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3002; do sleep 2; done'
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse audit on Docker container
        run: lhci autorun --collect.url=http://localhost:3002
        
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/
          retention-days: 7
          
      - name: Cleanup
        if: always()
        run: |
          docker stop perf-test || true
          docker rm perf-test || true

  docker-security-production-scan:
    name: Production Image Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-production
    
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Run Trivy vulnerability scanner on production image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-production-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-production-results.sarif'

  # Optional: Deploy to staging/production
  # docker-deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [docker-production-test, docker-performance-audit, docker-security-production-scan]
  #   environment: production
  #   
  #   steps:
  #     - name: Deploy to production
  #       run: |
  #         echo "Deploy ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest to production"
  #         # Add your deployment commands here
  #         # e.g., kubectl, docker-compose, AWS ECS, etc.
